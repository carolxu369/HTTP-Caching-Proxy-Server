Danger Log:

1. We use a parsing library and the copyright belongs to the library author. https://github.com/nekipelov/httpparser/tree/master/src/httpparser
2. As we were using the parsing library implemented by someone else, we tried to read and understand most of the implementation. We tested lots of HTTP request and response format examples before using the parsing library in our proxy. However, when actual websites' HTTP requests and responses were passed to the parser, the parser may report parsing fail. And we didn't know how to modify the implementations about judging whether a parsing is success or failure. That's a risk when trying to use others' implementations as we cannot understand every possible detail of the implementation and do proper debugging. As our following implementations are based on this parser, we cannot change the parser and we will improve that next time. The parsing fail doesn't influence the proxy a lot. However, this may cause to reload the website to get the response and may influence the cache response. Except these, the normal operations of HTTP websites and cache implementations work as required. Basically, the request and response can be passed smoothly between clients and original servers and cache works well.
3. When we cannot get the right parsed address info of host from the request, we will close the socket and send back "HTTP/1.1 400 Bad Request\r\n\r\n" to the client.
4. We made our exception guarantees when we did OO design for our cache implementation. For the cache assignment constructor, we first check if (this != &rhs) and then do the assignment with strong exception guarantees.